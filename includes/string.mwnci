if (!INCLUDE["STRING"]) {
    INCLUDE=set(INCLUDE, "STRING", true)

    function ljust(Text="", Length, Spacer=" ") {
        if (!checkfunctype("ljust", "string", Text, 1)) {exit(1)}
        if (!checkfunctype("ljust", "integer", Length, 2)) {exit(1)}
        if (!checkfunctype("ljust", "string", Spacer, 3)) {exit(1)}
        if (len(Spacer) != 1) {
            println("Error calling `ljust`: ERROR: fill character must be exactly one character long")
            exit(1)
        }
        if (Length <= len(Text)) {return Text}
        Repeat=repeat(Spacer, Length-len(Text))
        return Text + Repeat
    }

    function rjust(Text="", Length, Spacer=" ") {
        if (!checkfunctype("rjust", "string", Text, 1)) {exit(1)}
        if (!checkfunctype("rjust", "integer", Length, 2)) {exit(1)}
        if (!checkfunctype("rjust", "string", Spacer, 3)) {exit(1)}
        if (len(Spacer) != 1) {
            println("Error calling `rjust`: ERROR: fill character must be exactly one character long")
            exit(1)
        }
        if (Length <= len(Text)) {return Text}
        Repeat=repeat(Spacer, Length-len(Text))
        return Repeat + Text
    }

    function center(Text="", Length, Spacer=" ") {
        if (!checkfunctype("center", "string", Text, 1)) {exit(1)}
        if (!checkfunctype("center", "integer", Length, 1)) {exit(1)}
        if (!checkfunctype("center", "string", Spacer, 3)) {exit(1)}
        if (len(Spacer) != 1) {
            println("Error calling `center`: ERROR: fill character must be exactly one character long")
            exit(1)
        }

        if (Length <= len(Text)) {return Text}
        Beginning=int((Length-len(Text))/2)
        End=Length-(len(Text)+Beginning)
        Front=repeat(Spacer, Beginning)
        Back=repeat(Spacer, End)
        return Front + Text + Back
    }

    function title(Text="") {
        if (!checkfunctype("title", "string", Text, 1)) {exit(1)}
        if (len(Text) == 0) {return Text}
        textArray=fields(Text)
        Title=""
        foreach Word in textArray {
            Lower=tolower(Word)
            First=toupper(Lower[0])
            NewWord=set(Lower,0,First)
            Title=Title + " " + NewWord
        }
        return trim(Title)
    }

    function isspace(Text) {
        if (!checkfunctype("isspace", "string", Text, 1)) {exit(1)}
        if (len(Text) == 0) {return false}
        return (len(trim(Text)) == 0) ? true : false
    }

    function islower(Text) {
        if (!checkfunctype("islower", "string", Text, 1)) {exit(1)}
        return (tolower(Text) == Text) ? true : false
    }

    function isupper(Text) {
        if (!checkfunctype("isupper", "string", Text, 1)) {exit(1)}
        return (toupper(Text) == Text) ? true : false
    }

    function swapcase(Text) {
        if (!checkfunctype("swapcase", "string", Text, 1)) {exit(1)}
        foreach i, n in text {
            New=n
            if (isupper(n)) {
                New=tolower(n)
            }
            if (islower(n)) {
                New=toupper(n)
            }
            text=text.set(i, New)
        }
        return Text
    }

function partition(Text, Search) {                                          
        if (!checkfunctype("partition", "string", Text, 1)) {exit(1)}
        if (!checkfunctype("partition", "string", Search, 2)) {exit(1)}
        Data=[Text, "", ""]
        Position=index(Text, Search)
        if (Position == -1) {
            return Data
        }
        First=substr(Text, 0, Position)
        Start=len(First + Search)
        Length=len(Text) - Start
        Second=substr(Text, Start, Length)
        Data=[First, Search, Second]
        return Data
    }
}

function string.ljust(length, spacer) {return ljust(self, length, spacer)}
function string.rjust(length, spacer) {return rjust(self, length, spacer)}
function string.center(length, spacer) {return center(self, length, spacer)}
function string.title() {return title(self)}
function string.isspace() {return isspace(self)}
function string.islower() {return islower(self)}
function string.isupper() {return isupper(self)}
function string.swapcase() {return swapcase(self)}
function string.partition(search) {return partition(self, search)}
