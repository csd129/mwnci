if (!INCLUDE["OS"]) {
    INCLUDE=set(INCLUDE, "OS", true)
   
    function vmstat() {
    	DataHash={}
    	Data=shift(split(trim(system("vmstat")), "\n"),2)
    	Info=fields(Data[0])
    	ProcHash={"Run": int(Info[0]), "Block": int(Info[1])}
    	MemHash={"Swap": int(Info[2]), "Free": int(Info[3]), "Buff": int(Info[4]), "Cache": int(Info[5])}
    	SwapHash={"SwapIn": int(Info[6]), "SwapTo": int(Info[7])}
    	IOHash={"BlockIn": int(Info[8]), "BlockOut": int(Info[9])}
    	SysHash={"Inter": int(Info[10]), "Contxt": int(Info[11])}
    	CpuHash={"User": int(Info[12]), "Sys": int(Info[13]), "Idle": int(Info[14]), "Wait": int(Info[15]), "Steal": int(Info[16])}
	if (len(Info) == 18) {
	    CpuHash=set(CpuHash, "Guest", int(Info[17]))
	}
	DataHash={"Procs": ProcHash, "Memory": MemHash, "Swap": SwapHash, "IO": IOHash, "System": SysHash, "CPU": CpuHash}
	return DataHash
    }

    function getcpu(Cpu="") {
        CPUHash={}
        Data=regexp("^cpu", "/proc/stat")
	foreach Line in Data {
	    SLine=fields(Line)
	    CPU=(SLine[0] == "cpu") ? "all" : SLine[0]
	    SLine=int(shift(SLine))
	    Total=float(sum(SLine))
	    UserPC=float(sprintf("%.2f",(SLine[0] * 100) / Total))
	    NicePC=float(sprintf("%.2f",(SLine[1] * 100) / Total))
	    SysPC=float(sprintf("%.2f",(SLine[2] * 100) / Total))
	    IdlePC=float(sprintf("%.2f",(SLine[3] * 100) / Total))
	    IowaitPC=float(sprintf("%.2f",(SLine[4] * 100) / Total))
	    IrqPC=float(sprintf("%.2f",(SLine[5] * 100) / Total))
	    SoftirqPC=float(sprintf("%.2f",(SLine[6] * 100) / Total))
	    StealPC=float(sprintf("%.2f",(SLine[7] * 100) / Total))
	    GuestPC=float(sprintf("%.2f",(SLine[8] * 100) / Total))
	    GuestnicePC=float(sprintf("%.2f",(SLine[9] * 100) / Total))
	    TempHash={"user": UserPC, "nice": NicePC, "system": SysPC, "idle": IdlePC, "iowait": IowaitPC, "irq": IrqPC, "softirq": SoftirqPC, "steal": StealPC, "guest": GuestPC, "guest_nice": GuestnicePC}
	    CPUHash=CPUHash.set(CPU, TempHash)
	}
	if (Cpu != "" && len(CPUHash) > 0) {
	    CPUHash=CPUHash[Cpu]
	    CPUHash=CPUHash.set("CPU", Cpu)
	}
	return CPUHash
    }

    function uname() {
        Data=fields(trim(system("uname -n -s -r -m")))
        DataHash={
            "nodename": Data[0], "sysname": Data[1],
            "release": Data[2], "machine": Data[3]
        }
        return DataHash
    }

    function osrelease() {
        RelHash={}
        ReleaseFile="/etc/os-release"
        if (file(ReleaseFile)) {
            Data=split(trim(cat(ReleaseFile)), "\n")
            foreach Line in Data {
	        Sline=split(Line, "=")
	        RelHash=RelHash.set(Sline[0], trim(Sline[1], "\""))
	    }
        }
        return RelHash
    }

    function env() {
        EnvHash={}
        EnvVars=split(system("env"), "\n")
        foreach Var in EnvVars {
            SplitVar=cut(Var, "=")
            EnvHash=EnvHash.set(SplitVar[0], SplitVar[1])
        }
        return EnvHash
    } 
    
    function df() {
        DiskHash={}
        Mounted=shift(split(system("df"),"\n"))
        foreach Entry in Mounted {
            if (len(Entry) > 0) {
                SplitLine=fields(Entry)
	        	if (SplitLine[0].contains("/")) {
                    PercentUsed=int(trimsuffix(SplitLine[4], "%"))
                    PercentFree=100 - PercentUsed
                    TempHash={"blocks": int(SplitLine[1]), "used": int(SplitLine[2]), "available": int(SplitLine[3]), "usedperc": PercentUsed, "freeperc": PercentFree, "mount": SplitLine[5]}
                    DiskHash=set(DiskHash, SplitLine[0], TempHash)
                }
            }
        }
        return DiskHash
    }

    function free_linux() {
        MemoryHash={}
        Data=split(trim(system("free")), "\n")
		foreach Line in Data {
	    Sline=fields(Line)
	    if (Sline[0] == "Mem:") {
	        Total=int(Sline[1])
			Used=int(Sline[2])
			Free=int(Sline[3])
			Shared=int(Sline[4])
			Buff=int(Sline[5])
			Avail=int(Sline[6])
			UsedPC=sprintf("%.2f", float(Used) / float(Total) * 100)
			FreePC=sprintf("%.2f", float(100.0 - float(UsedPC)))
			Hashy={"total": Total, "used": Used, "free": Free, "shared": Shared, "cache": Buff, "avail": Avail, "usedperc": float(UsedPC), "freeperc": float(FreePC)}
			MemoryHash=set(MemoryHash, "mem", Hashy)
        }
	    if (Sline[0] == "Swap:") {
	        Total=int(Sline[1])
			Used=int(Sline[2])
			Free=int(Sline[3])
			UsedPC=sprintf("%.2f", float(Used) / float(Total) * 100)
			FreePC=sprintf("%.2f", float(100.0 - float(UsedPC)))
			Hashy={"total": Total, "used": Used, "free": Free, "usedperc": float(UsedPC), "freeperc": float(FreePC)}
			MemoryHash=set(MemoryHash, "swap", Hashy)
	    }
	}
	return MemoryHash
    }

    function free_bsd() {
        MemoryHash={}
		SysctlCmd="/sbin/sysctl -a | egrep \"vm.stats.vm.v|hw.physmem|hw.pagesize\""
		SysctlOutput=split(system(SysctlCmd),"\n")
		Sysctl={}
		foreach Line in SysctlOutput {
			Sline=cut(Line, ": ")
			Sysctl=set(Sysctl, Sline[0], Sline[1])
    	}
		PageSize=int(Sysctl["hw.pagesize"])
		mem_hw = int(Sysctl["hw.physmem"])
		mem_phys= int(Sysctl["hw.physmem"])
		mem_all=int(Sysctl["vm.stats.vm.v_page_count"])  * PageSize
		mem_wire=int(Sysctl["vm.stats.vm.v_wire_count"]) * PageSize
		mem_active=int(Sysctl["vm.stats.vm.v_active_count"]) * PageSize
		mem_inactive=int(Sysctl["vm.stats.vm.v_inactive_count"]) * PageSize
		mem_cache=int(Sysctl["vm.stats.vm.v_cache_count"]) * PageSize
		mem_free=int(Sysctl["vm.stats.vm.v_free_count"]) * PageSize
		mem_total = mem_hw
		mem_avail = mem_inactive + mem_cache + mem_free
		mem_used = mem_total - mem_avail
		mem_used_perc=sprintf("%.2f", float(mem_used) / float(mem_total)*100)
		mem_free_perc=sprintf("%.2f", float(100.00 - float(mem_used_perc)))
		hashy={"mem_cache": mem_cache / 1024, "total": mem_total / 1024, "mem_avail": mem_avail / 1024, "mem_used": mem_used / 1024, "mem_inactive": mem_inactive / 1024, "mem_free": mem_free / 1024, "used_perc": mem_used_perc, "free_perc": mem_free_perc, "mem_active": mem_active}
		MemoryHash=set(MemoryHash, "mem", hashy)
		Swap=split(trim(system("swapinfo")), "\n")
		Swap=shift(Swap)
		Total=Used=Avail=0
		foreach Line in Swap {
	    	Fields=fields(Line)
	    	Total += int(Fields[1])
	   	}
		swap_used_perc=sprintf("%.2f", float(Used) / float(Total)*100)
		swap_free_perc=sprintf("%.2f", float(100.0 - float(swap_used_perc)))
		hashy={"total": Total, "free": Avail, "used": Used, "used_perc": float(swap_used_perc), "free_perc": float(swap_free_perc)}
		MemoryHash=set(MemoryHash, "swap", hashy)
		return MemoryHash
    }


    function free() {
        switch(OS) {
			case "freebsd" {
				return free_bsd()
			}
			case "linux" {
				return free_linux()
			}
		}
    }

    function datetoepoch(Date="", Format="") {
       if (!checkfunctype("datetoepoch", "string", Date)) {
            exit(1)
        }
		switch (OS) {
			case "linux" {
                if (Date == "") {
                    Cmd="date +%s"
                } else {
                    Cmd="date +%s -d \"" + Date + "\""
				}
			}
			case "freebsd" {
				if (Date == "") {
	            	Date=date()
					Format="%a %b %d %T %Y"
	        	}
	        	Cmd="date -jf \"" + Format + "\" \"" + Date + "\" \"+%s\""
			}
		}
        Result=system(Cmd)
        Secs=int(trim(Result))
        return Secs
    }

    function string.datetoepoch() {
        return datetoepoch(self)
    }
}


