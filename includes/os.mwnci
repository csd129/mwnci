if (!INCLUDE["OS"]) {
    INCLUDE=set(INCLUDE, "OS", true)
   
    function uname() {
        Data=fields(trim(system("uname -n -s -r -m")))
        DataHash={
            "nodename": Data[0], "sysname": Data[1],
            "release": Data[2], "machine": Data[3]
        }
        return DataHash
    }

    function env() {
        h={}
        env_vars=split(system("env"), "\n")
        foreach ev in env_vars {
            v=cut(ev, "=")
            h=set(h, v[0], v[1])
        }
        return h
    } 
    
    function df() {
        diskhash={}
        mounted=shift(split(system("df"),"\n"))
        foreach entry in mounted {
            if (len(entry) > 0) {
                splitline=fields(entry)
	            if (splitline[0].contains("/")) {
                    perc_used=int(trimsuffix(splitline[4], "%"))
                    perc_free=100 - perc_used
                    temphash={"blocks": int(splitline[1]), "used": int(splitline[2]), "available": int(splitline[3]), "usedperc": perc_used, "freeperc": perc_free, "mount": splitline[5]}
                    diskhash=set(diskhash, splitline[0], temphash)
                }
            }
        }
        return diskhash
    }

    function free_linux() {
        memhash={}
        Data=split(trim(system("free")), "\n")
	foreach Line in Data {
	    Sline=fields(Line)
	    if (Sline[0] == "Mem:") {
	        Total=int(Sline[1])
		Used=int(Sline[2])
		Free=int(Sline[3])
		Shared=int(Sline[4])
		Buff=int(Sline[5])
		Avail=int(Sline[6])
		UsedPC=sprintf("%.2f", float(Used) / float(Total) * 100)
		FreePC=sprintf("%.2f", float(100.0 - float(UsedPC)))
	        Hashy={"total": Total, "used": Used, "free": Free, "shared": Shared, "cache": Buff, "avail": Avail, "usedperc": float(UsedPC), "freeperc": float(FreePC)}
		memhash=set(memhash, "mem", Hashy)
            }
	    if (Sline[0] == "Swap:") {
	        Total=int(Sline[1])
		Used=int(Sline[2])
		Free=int(Sline[3])
		UsedPC=sprintf("%.2f", float(Used) / float(Total) * 100)
		FreePC=sprintf("%.2f", float(100.0 - float(UsedPC)))
		Hashy={"total": Total, "used": Used, "free": Free, "usedperc": float(UsedPC), "freeperc": float(FreePC)}
		memhash=set(memhash, "swap", Hashy)
	    }
	}
	return memhash
    }

    function free_bsd() {
        memhash={}
	sysctl_cmd="/sbin/sysctl -a | egrep \"vm.stats.vm.v|hw.physmem|hw.pagesize\""
	sysctl_output=split(system(sysctl_cmd),"\n")
	sysctl={}
	foreach Line in sysctl_output {
	    Sline=cut(Line, ": ")
	    sysctl=set(sysctl, Sline[0], Sline[1])
    	}
	page_size=int(sysctl["hw.pagesize"])
	mem_hw = int(sysctl["hw.physmem"])
	mem_phys= int(sysctl["hw.physmem"])
	mem_all=int(sysctl["vm.stats.vm.v_page_count"])  * page_size
	mem_wire=int(sysctl["vm.stats.vm.v_wire_count"]) * page_size
	mem_active=int(sysctl["vm.stats.vm.v_active_count"]) * page_size
	mem_inactive=int(sysctl["vm.stats.vm.v_inactive_count"]) * page_size
	mem_cache=int(sysctl["vm.stats.vm.v_cache_count"]) * page_size
	mem_free=int(sysctl["vm.stats.vm.v_free_count"]) * page_size
	mem_total = mem_hw
	mem_avail = mem_inactive + mem_cache + mem_free
	mem_used = mem_total - mem_avail
	mem_used_perc=sprintf("%.2f", float(mem_used) / float(mem_total)*100)
	mem_free_perc=sprintf("%.2f", float(100.00 - float(mem_used_perc)))
	hashy={"mem_cache": mem_cache / 1024, "total": mem_total / 1024, "mem_avail": mem_avail / 1024, "mem_used": mem_used / 1024, "mem_inactive": mem_inactive / 1024, "mem_free": mem_free / 1024, "used_perc": mem_used_perc, "free_perc": mem_free_perc, "mem_active": mem_active}
	memhash=set(memhash, "mem", hashy)
	Swap=split(trim(system("swapinfo")), "\n")
	Swap=shift(Swap)
	Total=Used=Avail=0
	foreach Line in Swap {
	    Fields=fields(Line)
	    Total += int(Fields[1])
	    Used += int(Fields[2])
	    Avail += int(Fields[3])
	}
	swap_used_perc=sprintf("%.2f", float(Used) / float(Total)*100)
	swap_free_perc=sprintf("%.2f", float(100.0 - float(swap_used_perc)))
	hashy={"total": Total, "free": Avail, "used": Used, "used_perc": float(swap_used_perc), "free_perc": float(swap_free_perc)}
	memhash=set(memhash, "swap", hashy)
	return memhash
    }


    function free() {
        switch(OS) {
	    case "freebsd" {
	        return free_bsd()
	    }
	    case "linux" {
	        return free_linux()
	    }
	}
    }

    function datetoepoch(Date="", Format="") {
       if (!checkfunctype("datetoepoch", "string", Date)) {
            exit(1)
        }
	switch (OS) {
	    case "linux" {
                if (Date == "") {
                    Cmd="date +%s"
                } else {
                    Cmd="date +%s -d \"" + Date + "\""
	       }
 	    }
	    case "freebsd" {
	        if (Date == "") {
	            Date=date()
		    Format="%a %b %d %T %Y"
	        }
	        Cmd="date -jf \"" + Format + "\" \"" + Date + "\" \"+%s\""
	    }
	}
        Result=system(Cmd)
        Secs=int(trim(Result))
        return Secs
    }

    function meminfo() {
        memhash={}
        data=split(cat("/proc/meminfo"), "\n")
        foreach entry in data {
            if (len(entry) > 0) {
                entry=replaceall(entry, ":", "")
                entryarray=fields(entry)
                memhash=set(memhash, entryarray[0], entryarray[1])
            }
        }
        return memhash
    }
    
    function string.datetoepoch() {
        return datetoepoch(self)
    }
}


