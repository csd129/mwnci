if (!INCLUDE["OS"]) {
    INCLUDE=set(INCLUDE, "OS", true)

//
// The functions in here cater for all distro's (that I have access to)
// The next 2 lines will also "include"  distro specific functions
    osinc="os_" + OS
    include(osinc)

    function uname() {
        Data=fields(trim(system("uname -n -s -r -m")))
        DataHash={
            "nodename": Data[0], "sysname": Data[1],
            "release": Data[2], "machine": Data[3]
        }
        return DataHash
    }

    function vmstat() {
    	DataHash={}
    	Data=shift(split(trim(system("vmstat")), "\n"),2)
    	Info=fields(Data[0])
    	ProcHash={"Run": int(Info[0]), "Block": int(Info[1])}
    	MemHash={"Swap": int(Info[2]), "Free": int(Info[3]), "Buff": int(Info[4]), "Cache": int(Info[5])}
    	SwapHash={"SwapIn": int(Info[6]), "SwapTo": int(Info[7])}
    	IOHash={"BlockIn": int(Info[8]), "BlockOut": int(Info[9])}
    	SysHash={"Inter": int(Info[10]), "Contxt": int(Info[11])}
    	CpuHash={"User": int(Info[12]), "Sys": int(Info[13]), "Idle": int(Info[14]), "Wait": int(Info[15]), "Steal": int(Info[16])}
        if (len(Info) == 18) {
            CpuHash=set(CpuHash, "Guest", int(Info[17]))
        }
        DataHash={"Procs": ProcHash, "Memory": MemHash, "Swap": SwapHash, "IO": IOHash, "System": SysHash, "CPU": CpuHash}
        return DataHash
    }

    function df() {
        DiskHash={}
        Mounted=shift(split(system("df"),"\n"))
        Length=len(Mounted)-1
        Count=0
        while (Count <= Length) {
            Entry=Mounted[Count]
            Next=Mounted[Count+1]
            if (len(Entry) > 0) {
                SplitLine=fields(Entry)
//
// check for long mount length.. Disk info will be on line Count + 1
//
                if (len(SplitLine) == 1) {
                    NSplitLine=fields(Next)
                    SplitLine=extend(SplitLine, NSplitLine)
                    Count++
                }

                if (SplitLine[0].contains("/")) {
                    PercentUsed=int(trimsuffix(SplitLine[4], "%"))
                    PercentFree=100 - PercentUsed
                    TempHash={"blocks": int(SplitLine[1]), "used": int(SplitLine[2]), "available": int(SplitLine[3]), "usedperc": PercentUsed, "freeperc": PercentFree, "mount": SplitLine[5]}
                    DiskHash=set(DiskHash, SplitLine[0], TempHash)
                }
            }
            Count++
        }
        return DiskHash
    }

    function osrelease() {
        OsrHash={
            "name": null,
            "version": null,
            "id": "linux",
            "id_like": [],
            "version_codename": null,
            "version_id": null,
            "pretty_name": null,
            "ansi_color": null,
            "cpe_name": null,
            "build_id": null,
            "variant": null,
            "variant_id": null,
            "logo": null
        }

        UrlHash={
            "home": null,
            "documentation": null,
            "support": null,
            "bug_report": null,
            "privacy_policy": null
	    }
  	    DataFile=""
	    if (isexist("/etc/os-release")) {
	        DataFile="/etc/os-release"
	    } else if (isexist("/usr/lib/os-release")) {
	        DataFile="/usr/lib/os-release"
        }

        if (DataFile == "") {
            return OsrHash
        }
        Data=split(trim(cat(DataFile)), "\n")
        foreach Line in Data {
            Sline=split(Line, "=")
            Key=tolower(Sline[0])
            Value=trim(Sline[1], "\"")
            if (match("_url", Key)) {
                Key=trimsuffix(Key, "_url")
                UrlHash=set(UrlHash, Key, Value)
            } else {
                if (match("id_like", Key)) {Value=fields(Value)}
                OsrHash=set(OsrHash, Key, Value)
            }
        }
        OsrHash=set(OsrHash, "urls", UrlHash)
        return OsrHash
    }

    function loadavg() {
        Data=fields(trim(system("uptime")))
	Last=len(Data)-1
	fifteen=float(trim(Data[Last],","))
	five=float(trim(Data[Last-1], ","))
	one=float(trim(Data[Last-2], ","))
	return [one, five, fifteen]
    }
}

