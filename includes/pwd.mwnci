if (!INCLUDE["PWD"]) {
    INCLUDE=set(INCLUDE, "PWD", true)
    
    function getpwent(User="") {
        FindUser=string(User)
        PasswdArray=[]
        FileArray=regexp(FindUser, "/etc/passwd")
        foreach Entry in FileArray {
            UserHash={}
            Entry=trim(Entry)
            if (Entry[0] != "#") {
                UserInfo=split(trim(Entry), ":")
                Gecos=split(UserInfo[4], ",")
                UserHash=set(UserHash, "Gecos", Gecos)
                UserHash=set(UserHash, "User", UserInfo[0])
                UserHash=set(UserHash, "Uid", int(UserInfo[2]))
                UserHash=set(UserHash, "Gid", int(UserInfo[3]))
                UserHash=set(UserHash, "Home", UserInfo[5])
                Shell=(len(UserInfo[6]) == 0) ? "/bin/sh" : UserInfo[6]
                UserHash=set(UserHash, "Shell", Shell)
                PasswdArray=push(PasswdArray, UserHash)
            }
        }
        if (User != "") {
            foreach Entry in PasswdArray {
                if (Entry["User"] == FindUser || string(Entry["Uid"]) == FindUser) {
                    return Entry
                }
            }
            return {}
        }
	    return PasswdArray
    }

    function getpwnam(User="") {
        if (!checkfunctype("getpwnam", "string", User, 1)) {
            exit(1)
        }
        if (User == "") {
            println("Error calling `getpwnam`: ERROR: TypeError: getpwnam() takes exactly 1 argument (0 given)")
            exit(1)
        }
        return getpwent(User)
    }
    
    function getpwuid(Uid=-1) {
        if (!checkfunctype("getpwuid", "integer", Uid, 1)) {
            exit(1)
        }
        if (Uid == -1) {
            println("Error calling `getpwuid`: ERROR: TypeError: getpwuid() takes exactly 1 argument (0 given)")
            exit(1)
        }
	    return getpwent(Uid)
    }
    
    function hashpw() {
        PwHash={}
    	PWEntries=split(trim(cat("/etc/passwd")), "\n")
    	foreach line in PWEntries {
            line=string(split(line, "#")[0])
            if (len(line) > 0) {
                SplitLine=split(line,":")
                Gecos=string(SplitLine[4])
                Gecos=(len(Gecos) > 0 ? split(Gecos,",") : [])
                Shell = (len(SplitLine[6]) == 0) ? "/bin/sh" : SplitLine[6]
                NewHash={"Uid": int(SplitLine[2]), "Password": SplitLine[1], "Gid": int(SplitLine[3]), "Home": SplitLine[5], "Shell": Shell, "Gecos": Gecos}
                PwHash=set(PwHash, SplitLine[0], NewHash)
            }
        }
        return PwHash
    }
    
    function string.getpwent() {return getpwent(self)}
    function string.getpwnam() {return getpwnam(self)}
    function integer.getpwuid() {return getpwuid(self)}
}
