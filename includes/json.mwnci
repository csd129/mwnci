if (!INCLUDE["JSON"]) {
    INCLUDE=set(INCLUDE, "JSON", true)

// JSON       ->  Mmwci equivalient

// Number     ->  Number
// String     ->  String
// Boolean    ->  Boolean
// Array      ->  Array
// Object     ->  Hash
// Whitespace ->  Whitespace
// Null       ->  null


    function parsearray(ArrayData) {
        JsonBuild="["
        foreach Entry in ArrayData {
            if (Entry == null) {
                JsonBuild=JsonBuild + sprintf("%v,", Entry)
            } else {
                switch(type(Entry)) {
		    case "string" {
		        JsonBuild=JsonBuild + sprintf("\"%s\",", Entry)
		    }
		    case "float", "integer" {
		        JsonBuild=JsonBuild + sprintf("%s,", string(Entry))
		    }
                    case "bool" {
                        JsonBuild=JsonBuild + sprintf("%v,", bool(Entry))
                    }
	            case "array" {
		        JsonBuild=JsonBuild + parsearray(Entry)
	            }
	            case "hash" {
		        JsonBuild=JsonBuild + parsehash(Entry) + ","
	            }
	        }
            }
        }
        JsonBuild=JsonBuild + "]"
        return JsonBuild
    }

    function parsehash(HashData) {
        JsonBuild="{"
        foreach Val, Key in HashData {
            if (Val == null) {
                JsonBuild=JsonBuild + sprintf("\"%s\": %v,",Key, Val)
            } else {
                switch(type(Val)) {
	            case "string" {
		        JsonBuild=JsonBuild + sprintf("\"%s\": \"%s\",", Key, Val)
	            }
	            case "float", "integer" {
		        JsonBuild=JsonBuild + sprintf("\"%s\": %s,", Key, string(Val))
	            }
                    case "bool" {
                        JsonBuild=JsonBuild + sprintf("\"%s\": %v,", Key, bool(Val))
                    }
	            case "array" {
		        JsonBuild=JsonBuild + sprintf("\"%s\": %s,", Key, parsearray(Val))
	            }
	            case "hash" {
		        JsonBuild=JsonBuild + sprintf("\"%s\": %s,", Key, parsehash(Val))
	            }
	        }
            }
        }
        JsonBuild=JsonBuild + "}"
        return JsonBuild
    }

    function tjson(Data, JsonOutput) {
        switch(type(Data)) {
            case "array" {
	        Result=parsearray(Data)
	    }
	    case "hash" {
	        Result=parsehash(Data)
	    }
        }
        Result=replaceall(Result, "<NULL>", "null")
        Result=replaceall(Result, ",}", "}")
        Result=replaceall(Result, ",]", "]")
        return Result
    }

    function tomarkup(data, mu_type="json") {
        if (!checkfunctype("tomarkup", "string", data, 1)) {exit(1)}
        if (!checkfunctype("tomarkup", "string", mu_type, 2)) {exit(1)}
        tempfile="/tmp/markup." + string(getpid())
        writefile(tempfile, data + "\n")
        switch(mu_type) {
            case "xml", "json", "yaml" {
                cmd=sprintf("cat %s | yq --output-format %s", tempfile, mu_type)
            }
            default {
                return false
            }
        }
        result=trim(system(cmd))
        unlink(tempfile)
        return result
    }

    function tojson(JsonData) {
        if (!checkfunctype("tojson", "collection", JsonData, 1)) {exit(1)}
        return tomarkup(tjson(JsonData), "json")
    }

    function toyaml(JsonData) {
        if (!checkfunctype("toyaml", "collection", JsonData, 1)) {exit(1)}
        return tomarkup(tjson(JsonData), "yaml")
    }

    function toxml(JsonData) {
        if (!checkfunctype("toxml", "collection", JsonData, 1)) {exit(1)}
        return tomarkup(tjson(JsonData), "xml")
    }

    function object.tojson() {
        return tojson(self)
    }

    function object.toyaml() {
        return toyaml(self)
    }

    function object.toxml() {
        return toxml(self)
    }

    function object.tjson() {
        return tjson(self)
    }
}
