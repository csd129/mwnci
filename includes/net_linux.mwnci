if (!INCLUDE["NETLINUX"]) {
    INCLUDE=set(INCLUDE, "NETLINUX", true)

    function nsip4(IP) {
//
// LittleEndian requires byte swapping. In theory BigEndian
// doesn't.  I ain't got BigEndian to test, so will stick to LittleEndian
//
        IP1=substr(IP, 0, 2)
        IP2=substr(IP, 2, 2)
        IP3=substr(IP, 4, 2)
        IP4=substr(IP, 6 ,2)
        IP=(IP4 + IP3 + IP2 + IP1)
        return inttoip(hex2dec(IP))
    }

    function nsip6(IP) {
//
// LittlEndian stuff again. See Above
//
        IP=tolower(IP)
        A=[]
        foreach n in range(0,32,2) {
            A=push(A, substr(IP, n, 2))
        }
        AD=sprintf("%s%s:%s%s:%s%s:%s%s:%s%s:%s%s:%s%s:%s%s", A[3], A[2], A[1], A[0], A[7], A[6], A[5], A[4], A[11], A[10], A[9], A[8], A[15], A[14], A[13], A[12])
        AD=replaceall(AD, "0000:0000:0000", "")
        AD=replaceall(AD, "0000:0000", "")
        AD=replaceall(AD, "0000:", "")
        foreach n in 1..4 {
            AD=replaceall(AD, ":0", ":")
        }
        return AD
    }

    function route() {
        Flags=["","U","G","UG","H","UH","GH","UGH"]
        Route=[]
        Data=shift(split(trim(cat("/proc/net/route")), "\n"))
        foreach Line in Data {
            Sline=fields(Line)	
            iface=Sline[0]
            dest=nsip4(Sline[1])
            gway=nsip4(Sline[2])
            flags=Flags[int(Sline[3])]
            refcnt=int(Sline[4])
            use=int(Sline[5])
            metric=int(Sline[6])
            mask=nsip4(Sline[7])
            mtu=int(Sline[8])
            window=int(Sline[9])
            irtt=int(Sline[10])
            TempHash={"iface": iface, "desination": dest, "gateway": gway, "flags": flags, "refcnt": refcnt, "use": use, "metric": metric, "mask": mask, "mtu": mtu, "window": window, "irtt": irtt}
            Route=Route.push(TempHash)
        }
        return Route
    }

    function netstat() {
        PROCNET="/proc/net"
        PROTS=["tcp", "tcp6", "udp", "udp6", "raw", "raw6"]
        NetArray=[]
        CON_STATE={
            "01": "ESTABLISHED",
            "02": "SYN_SENT",
            "03": "SYN_RECV",
            "04": "FIN_WAIT1",
            "05": "FIN_WAIT2",
            "06": "TIME_WAIT",
            "07": "CLOSE",
            "08": "CLOSE_WAIT",
            "09": "LAST_ACK",
            "0A": "LISTEN",
            "0B": "CLOSING",
            "0C": "NEW_SYN_RECV"
        }

        foreach Prot in PROTS {
            File=PROCNET + "/" + Prot
            if (isexist(File)) {
                Type=basename(File)
                IPV6=match("6", Type)
                Data=split(trim(cat(File)), "\n")
                Data=shift(Data)
                foreach line in Data {
                    Sline=fields(line)
     	            IPPort=split(Sline[1], ":")
                    IP=(IPV6 == true) ? nsip6(IPPort[0]) : nsip4(IPPort[0])
                    Port=hex2dec(IPPort[1])
                    if (Port == 0) {Port="*"}
                    Local=IP + ":" + string(Port)
                    IPPort=split(Sline[2], ":")
                    IP=(IPV6 == true) ? nsip6(IPPort[0]) : nsip4(IPPort[0])
                    Port=hex2dec(IPPort[1])
                    if (Port == 0) {Port="*"}
                    Remote=IP + ":" + string(Port)
                    State=(Sline[3] != "07") ? CON_STATE[Sline[3]] : ""
                    TempArray=[Type, Local, Remote, State]
                    NetArray=push(NetArray, TempArray)
                }
            }
        }
        return NetArray
    }
    
    function nettrans(iface="") {
        if (!checkfunctype("nettrans", "string", iface, 1)) {exit(1)}
        data=split(cat("/proc/net/dev"), "\n")
        data=shift(data, 2)
        iface_hash={}
        foreach line in data {
            sline=fields(line)
            if (len(sline) > 0) {
                device=replace(sline[0], ":", "", 1)
                iface_data={"RX-OK": sline[2], "RX-ERR": sline[3], "RX-DRP": sline[4], "TX-OK": sline[10], "TX-ERR": sline[11], "TX-DRP": sline[12]}
                iface_hash=set(iface_hash, device, iface_data)
            }
        }
        if (len(iface) > 0) {
            return iface_hash[iface]
        }
        return iface_hash
    }
}
