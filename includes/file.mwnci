if (!INCLUDE["FILE"]) {
    INCLUDE=set(INCLUDE, "FILE", true)
    
    function getbin(permbit) {
        if (!checkfunctype("getbin", "integer", permbit)) {exit(1)}
        binary=bin(permbit)
        binary=trimprefix(binary, "0b")
        sizeb=3-len(binary)
        if (sizeb > 0) {
            prefix=repeat("0", sizeb)
            binary=prefix + binary
        }
        return binary
    }
    
    function isdoable(filename="", bit) {
        if (!checkfunctype("isdoable", "string", filename)) {exit(1)}
        if (!checkfunctype("isdoable", "integer", bit, 2)) {exit(1)}
        data=fields(file(filename, 1))
        perms=data[3]
        owner=getbin(int(perms[1]))[bit]
        group=getbin(int(perms[2]))[bit]
        other=getbin(int(perms[3]))[bit]
        fuid=data[7]
        fgid=data[8]
    
        if (int(fuid) == getuid()) {
            return (int(owner) == 1 ? true : false)
        }
        if (int(fgid) == getgid()) {
            return (int(group) == 1 ? true : false)
        }
        return (int(other) == 1 ? true : false)
    }
        
    function FileType(filename="") {
        if (!checkfunctype("FileType", "string", filename)) {exit(1)}
        if (len(filename) == 0) {
            println("Error calling `FileType`: ERROR: TypeError: FileType() takes exactly 1 argument (0 given)")
            exit(1)
        }
        if (isexist(filename)) {
            return fields(file(filename, 1))[6]
        } else {
            return "NOEXIST"
        }
    }

    function filetype(filename="") {
        if (!checkfunctype("filetype", "string", filename)) {exit(1)}
        return FileType(filename)
    }

    function isfile(filename="") {
        if (!checkfunctype("isfile", "string", filename, 1)) {exit(1)}
        if (len(filename) == 0) {
            println("Error calling `isfile`: ERROR: TypeError: isfile() takes exactly 1 argument (0 given)")
            exit(1)
        }        
        return (FileType(filename) == "FILE" ? true : false)
    }
    
    function isblock(filename="") {
        if (!checkfunctype("isblock", "string", filename, 1)) {exit(1)}
        if (len(filename) == 0) {
            println("Error calling `isblock`: ERROR: TypeError: isblock() takes exactly 1 argument (0 given)")
            exit(1)
        }        
        return (FileType(filename) == "BLOCK" ? true : false)
    }
    
    function isdir(filename="") {
        if (!checkfunctype("isdir", "string", filename, 1)) {exit(1)}
        if (len(filename) == 0) {
            println("Error calling `isdir`: ERROR: TypeError: isdir() takes exactly 1 argument (0 given)")
            exit(1)
        }        
        return (FileType(filename) == "DIR" ? true : false)
    }
    
    function ischr(filename="") {
        if (!checkfunctype("ischr", "string", filename, 1)) {exit(1)}
        if (len(filename) == 0) {
            println("Error calling `ischr`: ERROR: TypeError: ischr() takes exactly 1 argument (0 given)")
            exit(1)
        }        
        return (FileType(filename) == "CHR" ? true : false)
    }
    
    function isfifo(filename="") {
        if (!checkfunctype("isfifo", "string", filename, 1)) {exit(1)}
        if (len(filename) == 0) {
            println("Error calling `isfifo`: ERROR: TypeError: isfifo() takes exactly 1 argument (0 given)")
            exit(1)
        }        
        return (FileType(filename) == "FIFO" ? true : false)
   }
    
    function islink(filename="") {
        if (!checkfunctype("islink", "string", filename, 1)) {exit(1)}
        if (len(filename) == 0) {
            println("Error calling `islink`: ERROR: TypeError: islink() takes exactly 1 argument (0 given)")
            exit(1)
        }        
        return (FileType(filename) == "LINK" ? true : false)
    }
    
    function issock(filename="") {
        if (!checkfunctype("issock", "string", filename, 1)) {exit(1)}
        if (len(filename) == 0) {
            println("Error calling `issock`: ERROR: TypeError: issock() takes exactly 1 argument (0 given)")
            exit(1)
        }        
        return (FileType(filename) == "SOCKET" ? true : false)
    }

    function isexist(filename="") {
        if (!checkfunctype("isexist", "string", filename, 1)) {exit(1)}
        if (len(filename) == 0) {
            println("Error calling `isexist`: ERROR: TypeError: isexist() takes exactly 1 argument (0 given)")
            exit(1)
        }        
        return (len(glob(filename)) > 0 ? true : false)
    }   


    function isempty(filename="") {
        if (!checkfunctype("isempty", "string", filename)) {exit(1)}
        if (len(filename) == 0) {
            println("Error calling `isempty`: ERROR: TypeError: isempty() takes exactly 1 argument (0 given)")
            exit(1)
        }         
        fileinfo=fields(file(filename, 1))
        return (int(fileinfo[4]) == 0 ? true : false)
    }
    
    
    /*
    ** This section is for file comparisons and content
    */
    
    function isnewer(f_file="", s_file="") {
        if (!checkfunctype("isnewer", "string", f_file, 1)) {exit(1)}
        if (!checkfunctype("isnewer", "string", s_file, 2)) {exit(1)}
        if (s_file == "" || f_file == "") {
            println("Error caliing `isnewer`: ERROR: TypeError: isnewer() takes exactly 2 arguments (1 or less given)")
    	    exit(1)
        }
        f_stat=file(f_file, 1)
        s_stat=file(s_file, 1)
        if (!f_stat || !s_stat) {
            return false
        }
    
        f_mdate=int(fields(f_stat)[0])    
        s_mdate=int(fields(s_stat)[0])
    
        return (f_mdate > s_mdate ? true : false)
    }
    
    function isolder(f_file="", s_file="") {
        if (!checkfunctype("isolder", "string", f_file, 1)) {exit(1)}
        if (!checkfunctype("isolder", "string", s_file, 2)) {exit(1)}
        if (s_file == "" || f_file == "") {
            println("Error calling `isolder`: ERROR: TypeError: isolder() takes exactly 2 arguments (1 or less given)")
    	    exit(1)
        }
        return (!isnewer(f_file, s_file))
    }
    
    function isowner(filename="", user="") {
        if (!checkfunctype("isowner", "string", filename, 1)) {exit(1)}
        if (!checkfunctype("isowner", "string", user, 2)) {exit(1)}
    
        if (filename == "") {
            println("Error calling `isowner`: ERROR: TypeError: isowner() expected argument #1 to be `STRING` got `NULL`")
    	    exit(1)
        }
        
        if (user == "") {
            uid=int(getuid())
        } else {
            if (match("[a-z]", user)) {
                uid=int(getpwnam(user)[2])
    	    } else {
    	        uid=int(user)
            }
        }
    
        if (isexist(filename)) {
            owner=int(fields(file(filename, 1))[7])
    	    if (owner == uid) {
    	        return true
    	    }
        }
        return false
    }
    
    function isgroup(filename="", grp="") {
        if (!checkfunctype("isgroup", "string", filename, 1)) {exit(1)}
        if (!checkfunctype("isgroup", "string", grp, 2)) {exit(1)}
        if (filename == "") {
            println("Error calling `isgroup`: ERROR: TypeError: isgroup() expected argument #1 to be `STRING` got `NULL`")
    	    exit(1)
        }
        if (grp == "") {
            gid=int(getgid())
        } else {
            if (match("[a-z]", grp)) {
                gid=int(getgrnam(grp)[2])
    	    } else {
    	        gid=int(grp)
            }
        }
        if (isexist(filename)) {
            owner=int(fields(file(filename, 1))[8])
    	    if (owner == gid) {
    	        return true
    	    }
        }
        return false
    }
    
    function isexec(filename="") {
        if (!checkfunctype("isexec", "string", filename, 1)) {exit(1)}
        if (filename == "") {
            println("Error calling `isexec`: ERROR: TypeError: isexec() expected argument #1 to be `STRING` got `NULL`")
            exit(1)
        }    
        if (isreadable(filename)) {
            if(isdoable(filename, 2)) {
    	        return true
    	    }
        }
        return false
    }
    
    //
    // Same stuff, but having object methods
    // some users may prefer them
    //
    
    function string.iswritable() {
        return iswritable(self)
    }
    
    function string.isreadable() {
        return isreadable(self)
    }
    
    function string.isexec() {
        return isexec(self)
    }
    
    function string.isnewer(s_file="") {
        return isnewer(self, s_file)
    }
    
    function string.isolder(s_file="") {
        return isolder(self, s_file)
    }
    
    function string.isgroup(grp="") {
        return isgroup(self, grp)
    }
    
    function string.isowner(owner="") {
        return isowner(self, owner)
    }

    function string.isexist() {
        return isexist(self)
    }
    
    function string.isblock() {
        return isblock(self)
    }
    
    function string.isdir() {
        return isdir(self)
    }
    
    function string.isempty() {
        return isempty(self)
    }
    
    function string.isfifo() {
        return isfifo(self)
    }
    
    function string.isfile() {
        return isfile(self)
    }
    
    function string.islink() {
        return islink(self)
    }
    
    function string.issock() {
        return issock(self)
    }
    
    function writetofile(filename="", mode="w", data) {
        if (!checkfunctype("writetofile", "string", filename, 1)) {exit(1)}
        if (!checkfunctype("writetofile", "string", mode, 2)) {exit(1)}
        switch(type(data)) {
            case "array" {
    	        wstring=join(data,"\n")
    	    }
    	    case "hash" {
                line=""
    	        foreach key in keys(data) {
    	            line=line + key + " " + string(data[key]) + "\n"
    	        }
    	        wstring=trim(line)
    	    }
    	    case "string" {
                wstring=data
    	    }
        }
        writefile(filename, wstring)
        return true
    }
}

