if (!INCLUDE["MATH"]) {
    INCLUDE=set(INCLUDE, "MATH", true)

    function mode(MyArray) {
        UniqCount=ucount(MyArray)
        Largest=0
        Numbers=""
        foreach Amount in keys(UniqCount) {
            if (UniqCount[Amount] > Largest) {
                Numbers=Amount
                Largest=UniqCount[Amount]
            } else {
                if (UniqCount[Amount] == Largest) {
                    Numbers=Numbers + " " + Amount
                }
            }
        }
        return sort(fields(Numbers))
    }

    function average(MyArray) {
        if (!checkfunctype("average", "array", MyArray, 1)) {exit(1)}
        return float(sum(MyArray) / float(len(MyArray)))
    }

    function cbrt(Value=0) {
        if (!checkfunctype("cbrt", "number", Value, 1)) {exit(1)}
        return float(sprintf("%.6f", Value**0.3333333333333333))
    }

    function ceil(Value) {
        if (!checkfunctype("ceil", "number", Value, 1)) {exit(1)}
        return (Value > int(Value)) ? int(Value) + 1 : int(Value)
    }

    function degrees(Radian) {
        if (!checkfunctype("degrees", "number", Radian, 1)) {exit(1)}
        return Radian * (180/PI)
    }

    function dim(X=0,Y=0) {
        if (!checkfunctype("dim", "number", X, 1)) {exit(1)}
        if (!checkfunctype("dim", "number", Y, 2)) {exit(1)}
        V=float(X)-float(Y)
        return V < 0 ? float(0) : V
    }

    function exp(X=0) {
    	if (!checkfunctype("exp", "number", X, 1)) {exit(1)}
        return float(E**X)
    }

    function exp2(X=0) {
        if (!checkfunctype("exp2", "number", X, 1)) {exit(1)}
        return float(2.0**X)
    }

    function expm1(X=0) {
        if (!checkfunctype("expm1", "number", X, 1)) {exit(1)}
        return E**float(X)-1
    }

    function factorial(Number) {
        if (!checkfunctype("factorial", "integer", Number, 1)) {exit(1)}
        return product(1..Number)
    }
    
    function floor(Value) {
        if (!checkfunctype("floor", "number", Value, 1)) {exit(1)}
        if  (Value < 0) {
            return (int(Value) > Value) ? int(Value)-1 : int(Value);
        }
        return int(Value)
    }
    
    function fma(X=0, Y=0, Z=0) {
        if (!checkfunctype("fma", "number", X, 1)) {exit(1)}
        if (!checkfunctype("fma", "number", Y, 2)) {exit(1)}
        if (!checkfunctype("fma", "number", Z, 3)) {exit(1)}
        return float(float(X) * float(Y) + float(Z));
    }

    function fmod(n=0,d=0) {
        if (!checkfunctype("fmod", "number", n, 1)) {exit(1)}
        if (!checkfunctype("fmod", "number", d, 2)) {exit(1)}
	    if (d == 0) {
	        println("Error calling `fmod`: Error: argument #2 Division by zero")
	        exit(1)
	    }
        tq=float(int(n/d))
        return float(sprintf("%.15f", n-tq*d))
    }

    function gcd(Dividend, Divisor) {
        if (!checkfunctype("gcd", "integer", Dividend, 1)) {exit(1)}
        if (!checkfunctype("gcd", "integer", Divisor, 2)) {exit(1)}    
	    if (Dividend == 0 && Divisor == 0) {return 0}
        Remainder=1
        while (Remainder != 0) {
            Remainder=Dividend % Divisor
            Dividend=Divisor
            Divisor=Remainder
        }
        return Dividend
    }

    function highest(A, B) {
        if (!checkfunctype("highest", "number", A, 1)) {exit(1)}
        if (!checkfunctype("highest", "number", B, 2)) {exit(1)}
        return A > B ? A : B
    }

    function hypot(p, q) {
        if (!checkfunctype("hypot", "number", p, 1)) {exit(1)}
        if (!checkfunctype("hypot", "number", q, 2)) {exit(1)}
        p=abs(p)
        q=abs(q)
    
        if (p < q) {
            t = p
            p = q
            q = t
        }
    
        if (p == 0) {return 0}
    
        q = q / p
        return p * sqrt(1+q*q)
    }

    function isprime(n=0) {
        if (!checkfunctype("isprime", "integer", n, 1)) {exit(1)}
        i=2
        if (n < 2) {return false}
        while (i <= n/2) {
            if (n % i == 0) {
	            return false
	        }
            i++
        }
        return true
    }
    
    function lcm(num1, num2) {
        if (!checkfunctype("lcm", "integer", num1, 1)) {exit(1)}
        if (!checkfunctype("lcm", "integer", num2, 2)) {exit(1)}
        mult=num1 * num2
        gcdiv=gcd(num1, num2)
        return mult/gcdiv
    }

    function lowest(a, b) {
        if (!checkfunctype("lowest", "number", a, 1)) {exit(1)}
        if (!checkfunctype("lowest", "number", b, 2)) {exit(1)}
        return a < b ? a : b
    }
    
    //
    // For the mathematical pedants ;)
    //

    function mean(ave_array) {
        return average(ave_array)
    }

    // End pedantry

    function median(MedianArray) {
        if (!checkfunctype("median", "array", MedianArray)) {exit(1)}
        MedianArray=sort(MedianArray)
        Len=len(MedianArray)
        Calc=divmod(Len, 2)
        Pos=Calc[0]
        Remainder=Calc[1]
        if (Remainder == 1) {
            Median=MedianArray[Pos]
        } else {
            Median=(float(MedianArray[Pos]) + float(MedianArray[Pos-1]))/2.0
        }
        return Median
    }    
    
    function modf(num=0) {
        if (!checkfunctype("modf", "number", num, 1)) {exit(1)}
        inty=int(num)
        remainder=float(num) - float(inty)
        remainder=float(sprintf("%.15f", remainder))
        return [float(inty), float(remainder)]

    }
    
    function pow(num=1, power=1) {
        if (!checkfunctype("pow", "number", num, 1)) {exit(1)}
        if (!checkfunctype("pow", "number", power, 1)) {exit(1)}
        return float(num ** power)
    }
    
    function pow10(x=0) {
        if (!checkfunctype("pow10", "integer", x, 1)) {exit(1)}
        return float(10**x)
    }

    function radians(Degrees) {
        if (!checkfunctype("radians", "number", Degrees, 1)) {exit(1)}
        return Degrees * (PI / 180)
    }
       
    function round(rnum) {
        if (!checkfunctype("round", "number", rnum, 1)) {exit(1)}
        intnum=int(rnum)
        if (rnum > 0) {
            remain=float(rnum-intnum)
            result = (remain > 0.4) ? float(intnum + 1) : float(intnum)
        } else {
            remain=float(rnum+abs(intnum))
            result = (remain < -0.4) ? float(intnum - 1) : float(intnum)
        }
        return result
    }

    function perm(a, b) {
        Perm=int(factorial(a) / factorial(a-b))
        return Perm
    }

    function comb(a, b) {
        Comb=int(factorial(a) / (factorial(b) * factorial(a-b)))
        return Comb
    }
    
    function sqrt(n=0) {
        if (!checkfunctype("sqrt", "number", n, 1)) {exit(1)}
        return float(sprintf("%.6f", n**0.5))
    }

    function trunc(Float) {
        if (!checkfunctype("trunc", "number", Float, 1)) {exit(1)}
        return float(int(Float))
    }

    function float.round() {
        return round(self)
    }
    function object.abs() {
        return abs(self)
    }   

    function integer.isprime() {
        return isprime(self)
    }
    
    function integer.factorial() {
        return factorial(self)
    }
    
    function object.degrees() {
        return degrees(self)
    }
    
    function object.radians() {
        return radians(self)
    }
    
    function integer.divmod(divid) {
        return divmod(self, divid)
    }
    
    function array.average() {
        return average(self)
    }
    
    function object.pow(power) {
        return pow(self, power)
    }

    function float.trunc() {
        return trunc(self)
    }

    function object.exp() {
        return exp(self)
    }

    function object.dim(y=0) {
        return dim(self,y)
    }

    function object.exp2() {
        return exp2(self)
    }

    function object.expm1() {
        return expm1(self)
    }

    function object.pow10() {
        return pow10(self)
    }

    function object.modf() {
        return modf(self)
    }

    function object.sqrt() {
        return sqrt(self)
    }

    function object.cbrt() {
        return cbrt(self)
    }

    function array.mean() {
        return average(self)
    }

    function array.median() {
        return median(self)
    }

    function array.mode() {
        return mode(self)
    }
}

/*
 Math constants - add more here if needed
*/
const PI=     3.141592653589793
const PI_2=   PI/2
const PI_4=   PI/4
const E=      2.718281828459045
const TAU=    PI*2
const PHI=    1.618033988749894
const SQRT2=  sqrt(2)
const SQRTE=  sqrt(E)
const SQRTPI= sqrt(PI)
const SQRTPHI=sqrt(PHI)
const LN2=    0.693147180559945
const LOG2E=  1/LN2
const LN10=   2.302585092994045
const LOGH10E=1/LN10
