if (!INCLUDE["GRP"]) {
    INCLUDE=set(INCLUDE, "GRP", true)

    function getgrent(Group="") {
        GROUP="/etc/group"
        GroupArray=[]
        FileArray=split(trim(cat(GROUP)), "\n")

        foreach Line in FileArray {
            GroupHash={}
            Line=trim(Line)
            if (Line[0] != "#") {
                GroupInfo=split(trim(Line), ":")
                if (GroupInfo) {
                    if (len(GroupInfo[3]) > 0) {
                        Members=split(GroupInfo[3], ",")
                    } else {
                        Members=[]
                    }
                    GroupHash={"Group": GroupInfo[0], "Password": GroupInfo[1], "Gid": GroupInfo[2], "Members": Members}
                    GroupArray=push(GroupArray, GroupHash)
		}
	    }
        }
        if (Group != "") {
            foreach Entry in GroupArray {
                if (Entry["Group"] == Group || Entry["Gid"] == string(Group)) {
                    return Entry
                }
            }
            return {}
        }
        return GroupArray
    }

    
    function groups(User="") {
        if (!checkfunctype("groups", "string", User)) {exit(1)}
        if (User == "") {User=whoami()}
        GroupHash={}
        Groups=getgroups(User)
        foreach Group in Groups	{
            GroupHash=GroupHash.set(Group, getgrent(Group)["Group"])
        }
        return GroupHash
    }
    
    // getgrgid() and getgrnam() are available for backward compatibility
    // scripts coded with older versions of mwnci
    
    function getgrgid(Gid=-1) {
        if (!checkfunctype("getgrgid", "integer", Gid, 1)) {exit(1)}
        if (Gid == -1) {
            println("Error calling `getgrgid`: ERROR: TypeError: getgrgid() takes exactly 1 argument (0 given)")
            exit(1)
        }
        return getgrent(Gid)
    }
    
    function getgrnam(Gname="") {
        if (!checkfunctype("getgrnam", "string", Gname, 1)) {exit(1)}
        if (Gname == "") {
           println("Error calling `getgrnam`: ERROR: TypeError: getgrnam() takes exactly 1 argument (0 given)")
           exit(1) 
        }
    	return getgrent(Gname)
    }
    
    function hashgrp() {
        GrpHash={}
        GrpEntries=split(trim(cat("/etc/group")), "\n")
    	foreach line in GrpEntries {
            line=string(split(line, "#")[0])
            if (len(line) > 0) {
                SplitLine=split(line,":")
                Members=string(SplitLine[3])
                Members=(len(Members) > 0 ? split(Members,",") : [])
                NewHash={"Gid": SplitLine[2], "Members": Members}
                GrpHash=set(GrpHash, SplitLine[0], NewHash)
            }
        }
        return GrpHash
    }

    function getgroups(Username="") {
        if (!checkfunctype("groups", "string", Username, 1)) {exit(1)}
        GroupArray=[]
        PASSWD="/etc/passwd"
        GROUP="/etc/group"

        if (Username == "") {
            Username=whoami()
        }
        PWLine=regexp("^"+Username+":", PASSWD)
        if (len(PWLine) == 0) {
            return GroupArray
        }
        GroupArray=GroupArray.push(int(split(PWLine[0],":")[3]))
        GrpData=regexp(Username, GROUP)
        foreach Line in GrpData {
            SLine=split(Line, ":")
            GrGid=SLine[2]
            Users=fields(replaceall(SLine[3],",", " "))
            if (index(Users, Username) > -1) {
                GroupArray=GroupArray.push(int(GrGid))
            }
        }
        return usort(GroupArray)
    }


    function string.groups() {
        return groups(self)
    }
    
    function string.getgroups() {
        return getgroups(self)
    }
    function integer.getgrgid() {
        return getgrgid(self)
    }
    
    function string.getgrnam() {
        return getgrnam(self)
    }
}
