if (!INCLUDE["STATS"]) {
    INCLUDE=set(INCLUDE, "STATS", true)

    function samcov(X, Y) {
        if (!checkfunctype("samcov", "array", X, 1)) {exit(1)}
        if (!checkfunctype("samcov", "array", Y, 2)) {exit(1)}
        LenX=len(X)
        LenY=len(Y)
        if (LenX != LenY) {
            println("Error: `samcov` requires arrays of equal length.")
            exit(1)
        }
        MeanX=mean(X)
        MeanY=mean(Y)
        Obs=LenX-1
        Range=Obs
        Counter=0
        foreach Index in 0..Range {
            Counter += (X[Index]-MeanX) * (Y[Index]-MeanY)
        }
        return  Counter / Obs
    }

    function popcov(X, Y) {
        if (!checkfunctype("popcov", "array", X, 1)) {exit(1)}
        if (!checkfunctype("popcov", "array", Y, 2)) {exit(1)}
        LenX=len(X)
        LenY=len(Y)
        if (LenX != LenY) {
            println("Error: `popcov` requires arrays of equal length.")
            exit(1)
        }
        MeanX=mean(X)
        MeanY=mean(Y)
        Obs=LenX
        Range=Obs-1
        Counter=0
        foreach Index in 0..Range {
            Counter += (X[Index]-MeanX) * (Y[Index]-MeanY)
        }
        return  Counter / Obs
    }

    function variance(MyArray) {
        if (!checkfunctype("variance", "array", MyArray, 1)) {exit(1)}
        DivNum=len(MyArray)-1
        Mean=mean(MyArray)
        VarCount=0
        foreach Num in MyArray {
            VarNum=abs(Num - Mean) ** 2
            VarCount += VarNum
        }
        return VarCount / DivNum
    }

    function stdev(MyArray) {
        if (!checkfunctype("stdev", "array", MyArray, 1)) {exit(1)}
        return sqrt(variance(MyArray))
    }

    function mode(MyArray) {
        if (!checkfunctype("mode", "array", MyArray, 1)) {exit(1)}
        UniqCount=ucount(MyArray)
        Largest=0
        Numbers=""
        foreach Amount in keys(UniqCount) {
            if (UniqCount[Amount] > Largest) {
                Numbers=Amount
                Largest=UniqCount[Amount]
            } else {
                if (UniqCount[Amount] == Largest) {
                    Numbers=Numbers + " " + Amount
                }
            }
        }
        return float(sort(fields(Numbers)))
    }

    function average(MyArray) {
        if (!checkfunctype("average", "array", MyArray, 1)) {exit(1)}
        return float(sum(MyArray) / float(len(MyArray)))
    }

    //
    // For the mathematical pedants ;)
    //

    function mean(ave_array) {
        if (!checkfunctype("mean", "array", ave_array, 1)) {exit(1)}
        return average(ave_array)
    }

    // End pedantry

    function median(MedianArray=[]) {
        if (!checkfunctype("median", "array", MedianArray)) {exit(1)}
        NewArray=float(MedianArray)
        MedianArray=copy(NewArray)
        MedianArray=sort(MedianArray)
        Len=len(MedianArray)
        Calc=divmod(Len, 2)
        Pos=Calc[0]
        Remainder=Calc[1]
        if (Remainder == 1) {
            Median=MedianArray[Pos]
        } else {
            Median=(float(MedianArray[Pos]) + float(MedianArray[Pos-1]))/2.0
        }
        return Median
    }
    
    function harmonicmean(MyArray) {
        if (!checkfunctype("harmonicmean", "array", MyArray)) {exit(1)}
        Obs=len(MyArray)
        Counter=0
        foreach n in MyArray {
            Counter += (1/float(n))
        }
        return Obs / Counter
    }

    function array.variance() {
        return variance(self)
    }

    function array.stdev() {
        return stdev(self)
    }

    function array.mode() {
        return mode(self)
    }

    function array.average() {
        return average(self)
    }

    function array.mean() {
        return mean(self)
    }

    function array.median() {
        return median(self)
    }

    function array.harmonicmean() {
        return harmonicmean(self)
    }
}

