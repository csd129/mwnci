if (!INCLUDE["OSLINUX"]) {
    INCLUDE=set(INCLUDE, "OSLINUX", true)

    function free() {
        MemData=split(trim(cat("/proc/meminfo")), "\n")
        MemHash={}
        foreach Line in MemData {
            Line=replaceall(Line, ":", "")
            Sline=fields(Line)
            MemHash=MemHash.set(Sline[0], int(Sline[1]))
        }
        total=MemHash["MemTotal"]

//
// It appears older kernels don't supply KReclaimable
//
        if (!MemHash["KReclaimable"]) {
            MemHash=MemHash.set("KReclaimable", 0)
        }
        buffcache=MemHash["Cached"] + MemHash["KReclaimable"] + MemHash["Buffers"]
        memfree=MemHash["MemFree"]
        shared=MemHash["Shmem"]
        if (MemHash["MemAvailable"]) {
            available=MemHash["MemAvailable"]
        } else {
            available=memfree + MemHash["Cached"]
        }
        used=total - available
        swaptotal=MemHash["SwapTotal"]
        swapfree=MemHash["SwapFree"]
        swapused=swaptotal - swapfree
        Free={
            "mem": {
            "total": total, "used": used, "free": memfree, "shared": shared, "buffcache": buffcache, "available": available
            },
            "swap": {
            "total": swaptotal, "used": swapused, "free": swapfree
            }
        }
        return Free
    }

    function hashstats(Data) {
        CPUHash={}
        foreach Line in Data {
            SLine=fields(Line)
            CPU=(SLine[0] == "cpu") ? "all" : SLine[0]
            SLine=float(shift(SLine))
            TempHash={
                "user": SLine[0], "nice": SLine[1], "system": SLine[2],
                "idle": SLine[3], "iowait": SLine[4], "irq": SLine[5],
                "softirq": SLine[6], "steal": SLine[7], "guest": SLine[8],
                "guest_nice": SLine[9]
                }
            CPUHash=set(CPUHash, CPU, TempHash)
        }
        return CPUHash
    }

    function getcpu(Cpu="", Delay=0.75 ) {
        Data=[]
        CPUHash={}
        Delay=float(Delay) * 1000
        First=hashstats(regexp("^cpu", "/proc/stat"))
        sleep(int(Delay))
        Second=hashstats(regexp("^cpu", "/proc/stat"))
        foreach CPU in keys(First) {
            User=Second[CPU]["user"] - First[CPU]["user"]
            Nice=Second[CPU]["nice"] - First[CPU]["nice"]
            Sys=Second[CPU]["system"] - First[CPU]["system"]
            Idle=Second[CPU]["idle"] - First[CPU]["idle"]
            Iowait=Second[CPU]["iowait"] - First[CPU]["iowait"]
            Irq=Second[CPU]["irq"] - First[CPU]["irq"]
            Softirq=Second[CPU]["softirq"] - First[CPU]["softirq"]
            Steal=Second[CPU]["steal"] - First[CPU]["steal"]
            Guest=Second[CPU]["guest"] - First[CPU]["guest"]
            Guestnice=Second[CPU]["guest_nice"] - First[CPU]["guest_nice"]
            Total=float(User + Nice + Sys + Idle + Iowait + Irq + Softirq + Steal + Guest + Guestnice)
            User=float(sprintf("%.2f",(User * 100) / Total))
            Nice=float(sprintf("%.2f",(Nice * 100) / Total))
            Sys=float(sprintf("%.2f",(Sys * 100) / Total))
            Idle=float(sprintf("%.2f",(Idle * 100) / Total))
            Iowait=float(sprintf("%.2f",(Iowait * 100) / Total))
            Irq=float(sprintf("%.2f",(Irq * 100) / Total))
            Softirq=float(sprintf("%.2f",(Softirq * 100) / Total))
            Steal=float(sprintf("%.2f",(Steal * 100) / Total))
            Guest=float(sprintf("%.2f",(Guest * 100) / Total))
            Guestnice=float(sprintf("%.2f",(Guestnice * 100) / Total))
            TempHash={"user": User, "nice": Nice, "system": Sys, "idle": Idle, "iowait": Iowait, "irq": Irq, "softirq": Softirq, "steal": Steal, "guest": Guest, "guest_nice": Guestnice}
            CPUHash=CPUHash.set(CPU, TempHash)
        }
        if (Cpu != "" && len(CPUHash) > 0) {
            CPUHash=CPUHash[Cpu]
            CPUHash=CPUHash.set("CPU", Cpu)
        }
        return CPUHash
    }

    function datetoepoch(Date="", Format="") {
        if (!checkfunctype("datetoepoch", "string", Date)) {exit(1)}
        if (Date == "") {
            Cmd="date +%s"
        } else {
            Cmd="date +%s -d \"" + Date + "\""
		}
        Result=system(Cmd)
        Secs=int(trim(Result))
        return Secs
    }

    function vmstat() {
    	DataHash={}
    	Data=shift(split(trim(system("vmstat")), "\n"),2)
    	Info=fields(Data[0])
    	ProcHash={"Run": int(Info[0]), "Block": int(Info[1])}
    	MemHash={"Swap": int(Info[2]), "Free": int(Info[3]), "Buff": int(Info[4]), "Cache": int(Info[5])}
    	SwapHash={"SwapIn": int(Info[6]), "SwapTo": int(Info[7])}
    	IOHash={"BlockIn": int(Info[8]), "BlockOut": int(Info[9])}
    	SysHash={"Inter": int(Info[10]), "Contxt": int(Info[11])}
    	CpuHash={"User": int(Info[12]), "Sys": int(Info[13]), "Idle": int(Info[14]), "Wait": int(Info[15]), "Steal": int(Info[16])}
        if (len(Info) == 18) {
            CpuHash=set(CpuHash, "Guest", int(Info[17]))
        }
        DataHash={"Procs": ProcHash, "Memory": MemHash, "Swap": SwapHash, "IO": IOHash, "System": SysHash, "CPU": CpuHash}
        return DataHash
    }
}
