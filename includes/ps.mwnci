if (!INCLUDE["PS"]) {
    INCLUDE=set(INCLUDE, "PS", true)

    switch (OS) {
        case /bsd/ , /darwin/ {
            include("ps_bsd")
        }
        case "linux" {
            include("ps_linux")
        }
    }

    
    function procexists(pid=-1) {
        if (!checkfunctype("procexists", "integer", pid, 1)) {exit(1)}
        return contains(keys(process()), pid)
    }

    function process() {
        CmdHash={}
        ProcessTable={}
        Processes=split(trim(system("ps aux | tail -n +2")), "\n")
        foreach Process in Processes {
            Cmd=""
            line=fields(Process)
            b=shift(line, 10)
            Cmd=trim(join(b, " "))
    	    CmdHash={"USER": line[0], "CPU": float(line[2]), "MEM": float(line[3]), "VSZ": int(line[4]), "RSS": int(line[5]), "TTY": line[6], "STAT": line[7], "START": line[8], "TIME": line[9], "COMMAND": Cmd}
    	    ProcessTable=set(ProcessTable, int(line[1]), CmdHash)
        }
        return ProcessTable
    }
    
    function pnametopid(name="") {
        if (!checkfunctype("pnametopid", "string", name, 1)) {exit(1)}
        if (name=="") {
            println("Error calling `pnametopid`: ERROR: TypeError: pnametopid() expected argument #1 to be `STRING` got `NULL`")
            exit(1)
        }
        Cmd="pgrep " + name + "; exit 0"
        IP=split(trim(system(Cmd)), "\n")
        if (!IP) {
            return false
        }
        return int(IP)
    }
    
    function procstat(pid=-1) {
        Data={}
        Result=shift(split(trim(system("ps aux")), "\n"))
        foreach Line in Result {
            SLine=fields(Line)
            if (len(SLine) > 0) {
                if (!contains(SLine[10] ,"[")) {
                    Uid=getpwnam(SLine[0])["Uid"]
                    Proc_Hash={
                        "pcpu": float(SLine[2]),
                        "pmem": float(SLine[3]),
                        "uid": Uid,
                        "user": SLine[0],
                        "cmd": SLine[10]
                    }
                    Key=SLine[1]
                    Data=set(Data, Key, Proc_Hash)
                }
            }
        }
        if (pid > 0) {
            return Data[string(pid)]
        } else {
            return Data
        }
    }

    function integer.getpname() {return getpname(self)}
    function string.pnametopid() {return pnametopid(self)}
    function integer.procstat() {return procstat(self)}
    function integer.procexists() {return procexists(self)}
}
