if (!INCLUDE["PS"]) {
    INCLUDE=set(INCLUDE, "PS", true)
    
    function process() {
        CmdHash={}
        ProcessTable={}
        Processes=split(trim(system("ps aux | tail -n +2")), "\n")
        foreach process in Processes {
            Cmd=""
            line=fields(process)
            b=shift(line, 10)
            Cmd=trim(join(b, " "))
    	    CmdHash={"USER": line[0], "CPU": line[2], "MEM": line[3], "VSZ": int(line[4]), "RSS": line[5], "TTY": line[6], "STAT": line[7], "START": line[8], "TIME": line[9], "COMMAND": Cmd}
    	    ProcessTable=set(ProcessTable, line[1], CmdHash)
        }
        return ProcessTable
    }
    
    function pnametopid(name="") {
        if (!checkfunctype("pnametopid", "string", name, 1)) {exit(1)}        
        parray=[]
        if (name=="") {
            println("Error calling `pnametopid`: ERROR: TypeError: pnametopid() expected argument #1 to be `STRING` got `NULL`")
            exit(1)
        }
        Processes=process()
        PIDs=keys(Processes)
        foreach Pid in PIDs {
            CommandLine=Processes[Pid]["COMMAND"]
    	    CmdArray=fields(CommandLine)
    	    Command=basename(CmdArray[0])
            if (Command == name) {
    	        parray=push(parray, int(Pid))
    	    }
        }
        if (len(parray) > 0) {
            return sort(parray)
        }
        return false
    }
    
    function getpname(pid=0) {
        if (!checkfunctype("getpname", "integer", pid, 1)) {exit(1)}
        if (pid == 0) {pid=getpid()}
        ProcFile="/proc/" + string(pid) + "/comm"
        if (file(ProcFile)) {
            Data=fields(trim(cat(ProcFile)))
            return Data[0]
        }
        return false
    }
    
    function procstat(pid=-1) {
        if (!checkfunctype("procstat", "integer", pid)) {exit(1)}
        Data={}
        Command="ps -eo pcpu,pmem,pid,uid,user,args --no-headers"
        Result=split(trim(system(Command)), "\n")
        foreach Line in Result {
	    SLine=fields(Line)
            if (len(SLine) > 0) {
                if (!contains(SLine[5] ,"[")) {
                    Proc_Hash={
                        "pcpu": float(SLine[0]),
                        "pmem": float(SLine[1]),
                        "uid": int(SLine[3]),
                        "user": SLine[4],
                        "cmd": SLine[5]
                    }
                    Key=SLine[2]
                    Data=set(Data, Key, Proc_Hash)
                }
            }
        }
        if (pid > 0) {
            return Data[string(pid)]
        } else {
            return Data
        }
    }

    function procexists(pid=-1) {
        if (!checkfunctype("procexists", "integer", pid, 1)) {exit(1)}
        ProcFile="/proc/" + string(pid)
        return (file(ProcFile)) ? true : false
    }

    function integer.getpname() {return getpname(self)}
    function string.pnametopid() {return pnametopid(self)}
    function integer.procstat() {return procstat(self)}
    function integer.procexists() {return procexists(self)}
}
