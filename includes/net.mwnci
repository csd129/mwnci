if (!INCLUDE["NET"]) {
    INCLUDE=set(INCLUDE, "NET", true)

    RTF_FLAGS={
        "0001": "U",
        "0002": "G",
        "0003": "UG",
        "0004": "H",
    }

    TCP_STATES={
        "01": "ESTABLISHED",
        "02": "SYN_SENT",
        "03": "SYN_RECV",
        "04": "FIN_WAIT1",
        "05": "FIN_WAIT2",
        "06": "TIME_WAIT",
        "07": "CLOSE",
        "08": "CLOSE_WAIT",
        "09": "LAST_ACK",
        "0A": "LISTEN",
        "0B": "CLOSING",
        "0C": "NEW_SYN_RECV",
        "0D": "MAX_STATES"
    }

    function parseconn(conn="", proto="") {
        SplitConn=splithostport(conn)
        if (hassuffix(proto, "6")) {
            IP=hextoipv6(SplitConn[0])
        } else {
            IP=hextoipv4(SplitConn[0])
        }
        Port=string(hex2dec(SplitConn[1]))
        if (Port == "0") {Port="*"}
        return sprintf("%s:%s", IP, Port)
    }

    function openports() {
        port_array=[]
        foreach line in netstat() {
            if (line[3] == "LISTEN") {
                port=split(line[1], ":")
                port_array=push(port_array, int(port[len(port)-1]))
            }
        }
        port_array=usort(port_array)
        return port_array
    }
    
    function cidrrange(cidr="") {
        if (!checkfunctype("cidrrange", "string", cidr)) {exit(1)}
        ips=listcidrips(cidr)
	return [ips[0], ips[len(ips)-1]]
    }
    
    function ping(host="", timeout=0) {
        if (host == "") {
            println("Error calling `ping`: ERROR: TypeError: ping() takes expected argument #1 to be `STRING` got `NULL`")
            exit(1)
        }
        if (!checkfunctype("ping", "string", host, 1)) {exit(1)}
        if (!checkfunctype("ping", "integer", timeout, 2)) {exit(1)}
        if (timeout < 1) {timeout=4}
        cmd=sprintf("ping -c 1 -W %d %s > /dev/null && echo true || echo false", timeout, host)
        return (trim(system(cmd)) == "true") ? true : false
    }
    
    function addresscount(cidr="") {
        if (!checkfunctype("addresscount", "string", cidr)) {
            exit(1)
        }
        return len(listcidrips(cidr))
    }
    
    function iptoint(IP) {
        if (!checkfunctype("iptoint", "string", IP, 1)) {exit(1)}
        if (!checkip(IP)) {return false}
        octets=IP.split(".")
        return int(octets[3]) + (int(octets[2]) << 8) + (int(octets[1]) << 16) + (int(octets[0]) << 24)
    }

    function inttoip(number) {
        if (!checkfunctype("inttoip", "integer", number, 1)) {exit(1)}
        return sprintf("%d.%d.%d.%d", (number >> 24) & 255, (number >> 16) & 255, (number >> 8) & 255, number & 255)
    }

    function sortips(iparray=[]) {
        if (!checkfunctype("sortips", "array", iparray, 1)) {exit(1)}
        if (len(iparray) <= 1) {return iparray}
        foreach i, ip in iparray {
            iparray=set(iparray, i, iptoint(ip))
        }
        iparray=sort(iparray)
        foreach i, ip in iparray {
            iparray=set(iparray, i, inttoip(ip))
        }
        return iparray
    }

    function rsortips(ip_array=[]) {
        if (!checkfunctype("rsortips", "array", ip_array, 1)) {exit(1)}
	    if (len(ip_array) <= 1) {return ip_array}
	    return reverse(sortips(ip_array))
    }

    function hextoipv6(hexaIP="") {
        i=0
	    result=""
	    while (i < len(hexaIP)) {
	        word=hexaIP.substr(i, 8)
	        foreach n in [6, 7, 4, 5, 2, 3, 0, 1] {
	            result=result + string(word[n])
		        if (n==5 || n==1){result=result + ":"}
	        }
	        i += 8
	    }
	    result=split(substr(result,0, len(result)-1), ":")
	    ipv6_result=""
	    foreach hexy in result {
	        temp=ltrim(hexy, "0")
	        if (len(temp) == 0) {temp="0"}
	        ipv6_result=ipv6_result + temp + ":"
	    }
	    return tolower(substr(ipv6_result,0, len(ipv6_result)-1))
    }

    function lookupport(Port=0, Proto="tcp") {
        if (!checkfunctype("lookupport", "integer", Port, 1)) {exit(1)}
        if (!checkfunctype("lookupport", "string", Proto, 2)) {exit(1)}
        SERVICES="/etc/services"
        InitList=regexp(string(Port)+"/"+Proto, SERVICES)
        foreach Line in InitList {
            if (len(Line) > 0) {
                SLine=fields(Line)
                Service=SLine[0]
                ServPort=split(SLine[1], "/")[0]
                if (Port == int(ServPort)) {
                    return Service
                }
            }
        }
	    return null
    }

    function route() {
        RouteArray=[]
        Cmd="netstat -nr | egrep -v \"^[A-Z]|^$\""
	Data=split(trim(system(Cmd)), "\n")
	foreach Line in Data {
	    TempHash={}
	    Sline=fields(Line)
	    switch(OS) {
	        case "freebsd" {
		    TempHash={"Destination": Sline[0], "Gateway": Sline[1], "Flags": Sline[2], "Iface": Sline[3]}
		    if (len(Sline) > 4) {
		        TempHash=set(TempHash, "Expire", Sline[4])
		    }
		}
		default {
		    TempHash={"Destination": Sline[0], "Gateway": Sline[1], "Genmask": Sline[2], "Flags": Sline[3], "MSS": Sline[4], "Window": Sline[5], "irtt": Sline[6], "Iface": Sline[7]}
		}
	    }
	    RouteArray=RouteArray.push(TempHash)
	}
	return RouteArray
    }

    function hextoipv4(hexaIP="") {
        converted=inttoip(hex2dec(hexaIP))
	    return join(reverse(split(converted, ".")), ".")
    }

    function netstat() {
        NetArray=[]
        Data=split(trim(system("netstat -an")), "\n")
	foreach Line in Data {
	// We just need the lines starting with tcp or udp
	    if (match("^tcp", Line) || match("^udp", Line)) {
	        Sline=fields(Line)
		Sline=set(Sline, 0, replaceall(Sline[0], "tcp4", "tcp"))
		Sline=set(Sline, 0, replaceall(Sline[0], "udp4", "udp"))
		Local=reverse(Sline[3])
		Remote=reverse(Sline[4])
		Local=reverse(replace(Local, ".", ":", 1))
		Remote=reverse(replace(Remote, ".", ":", 1))
		if (Sline[0] == "tcp6" || Sline[0] == "udp6") {
		    Local=replaceall(Local, "*:", ":::")
		    Remote=replaceall(Remote, "*:", ":::")
		} else {
		    Local=replaceall(Local, "*:", "0.0.0.0:")
		    Remote=replaceall(Remote, "*:", "0.0.0.0:")
		}
		Sline=set(Sline, 3, Local)
		Sline=set(Sline, 4, Remote)
		
		if (Sline[0] == "tcp6" || Sline[0] == "udp6") {
		    Line=replaceall(Line, "*.", ":::")
		} else {
		    Line=replaceall(Line, "*.", "0.0.0.0:")
		}
		Sline=delete(Sline,1)
		Sline=delete(Sline,1)
		NetArray=push(NetArray, Sline)
	    }
	}
	return NetArray
    }
    
    function nettrans(iface="") {
        if (!checkfunctype("nettrans", "string", iface, 1)) {exit(1)}
        data=split(cat("/proc/net/dev"), "\n")
        data=shift(data, 2)
        iface_hash={}
        foreach line in data {
            sline=fields(line)
            if (len(sline) > 0) {
                device=replace(sline[0], ":", "", 1)
                iface_data={"RX-OK": sline[2], "RX-ERR": sline[3], "RX-DRP": sline[4],
                            "TX-OK": sline[10], "TX-ERR": sline[11], "TX-DRP": sline[12]}
	            iface_hash=set(iface_hash, device, iface_data)
	        }
        }
        if (len(iface) > 0) {
            return iface_hash[iface]
        }
        return iface_hash
    }

    function string.hextoipv6() {
        return hextoipv6(self)
    }

    function string.hextoipv4() {
        return hextoipv4(self)
    }

    function string.cidrrange() {
        return cidrrange(self)
    }
    
    function string.addresscount() {
        return addresscount(self)
    }

    function string.netstat() {
        return netstat(self)
    }

    function string.ping(count=0) {
        return ping(self, count)
    }

    function string.iptoint() {
        return iptoint(self)
    }

    function integer.inttoip() {
    	return inttoip(self)
    }

    function string.nettrans() {
        return nettrans(self)
    }

    function array.sortips() {
        return sortips(self)
    }

    function array.rsortips() {
        return rsourtips(serlf)
    }
}
