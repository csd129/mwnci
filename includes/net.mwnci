if (!INCLUDE["NET"]) {
    INCLUDE=set(INCLUDE, "NET", true)

    switch (OS) {
        case /bsd/ , /darwin/ {
            include("net_bsd")
        }
        case "linux" {
            include("net_linux")
        }
    }

    function openports() {
        port_array=[]
        foreach line in netstat() {
            if (line[3] == "LISTEN") {
                port=split(line[1], ":")
                port_array=push(port_array, int(port[len(port)-1]))
            }
        }
        port_array=usort(port_array)
        return port_array
    }
    
    function cidrrange(cidr="") {
        if (!checkfunctype("cidrrange", "string", cidr)) {exit(1)}
        ips=listcidrips(cidr)
        return [ips[0], ips[len(ips)-1]]
    }
    
    function ping(host="", timeout=0) {
        if (host == "") {
            println("Error calling `ping`: ERROR: TypeError: ping() takes expected argument #1 to be `STRING` got `NULL`")
            exit(1)
        }
        if (!checkfunctype("ping", "string", host, 1)) {exit(1)}
        if (!checkfunctype("ping", "integer", timeout, 2)) {exit(1)}
        if (timeout < 1) {timeout=4}
        cmd=sprintf("ping -c 1 -W %d %s > /dev/null && echo true || echo false", timeout, host)
        return (trim(system(cmd)) == "true") ? true : false
    }
    
    function addresscount(cidr="") {
        if (!checkfunctype("addresscount", "string", cidr)) {
            exit(1)
        }
        return len(listcidrips(cidr))
    }
    
    function lookupport(Port=0, Proto="tcp") {
        if (!checkfunctype("lookupport", "integer", Port, 1)) {exit(1)}
        if (!checkfunctype("lookupport", "string", Proto, 2)) {exit(1)}
        SERVICES="/etc/services"
        InitList=regexp(string(Port)+"/"+Proto, SERVICES)
        foreach Line in InitList {
            if (len(Line) > 0) {
                SLine=fields(Line)
                Service=SLine[0]
                ServPort=split(SLine[1], "/")[0]
                if (Port == int(ServPort)) {
                    return Service
                }
            }
        }
        return null
    }

    function conncount() {
        Data=netstat()
        TypeList=[]
        foreach Entry in Data {
            Type=Entry[3]
            if (len(Type) > 4) {
                if (match("^[A-Z]", Type)) {
                    TypeList=push(TypeList, Type)
                }
            }
        }
        return ucount(TypeList)
    }    

    function port2pid(Port=0) {
        if (!checkfunctype("port2pid", "integer", Port, 1)) {exit(1)}
        OfHash={}
        PortArray=[]
        ListArray=[]
        Data=split(trim(system("lsof -P -i | grep LISTEN; exit 0")), "\n")
        if (len(Data) != 0) {
            foreach Line in Data {
                Line=trimsuffix(Line, " (LISTEN)")
                Line=fields(replaceall(Line, ":", " "))
                PortArray=push(PortArray, Line[len(Line)-1])
                ListArray=push(ListArray, [Line[0], Line[1], Line[len(Line)-1]])
            }
        }
        PortArray=PortArray.uniq()
        ListArray=ListArray.uniq()
        foreach Port in PortArray {
            if (Port != "*") {
                TempArray=[]
                Proc=""
                foreach Entry in ListArray {
                    if (Port == Entry[2]) {
                        Proc=Entry[0]
                        TempArray=TempArray.push(int(Entry[1]))
                    }
                }
                TempHash={"pids": TempArray, "proc": Proc}
                OfHash=set(OfHash, Port, TempHash)
            }
        }	    
        if (Port != 0 && len(OfHash) > 0) {
            return (len(OfHash[string(Port)]) > 0) ? OfHash[string(Port)] : {}
        }
            return OfHash
    }
    
    function integer.port2pid() {
        return port2pid(self)
    }

    function string.cidrrange() {
        return cidrrange(self)
    }
    
    function string.addresscount() {
        return addresscount(self)
    }

    function string.netstat() {
        return netstat(self)
    }

    function string.ping(count=0) {
        return ping(self, count)
    }

    function string.nettrans() {
        return nettrans(self)
    }
}